using UnityEngine;
using System.Collections;
using VRTK;

/// <summary>
/// This class is used for the individual panels in the SortingPanels
/// class.  They will hold reference to the cubes snapped on them.
/// </summary>
public class SortingPanel : MonoBehaviour {

	/// <summary>
	/// The connectedObject is the object snapped onto the panel.
	/// </summary>
	public GameObject connectedObject;

	/// <summary>
	/// This is the list of listeners 
	/// </summary>
	public ArrayList listeners = new ArrayList();

	/// <summary>
	/// This method is unused because panels wait on user interaction
	/// </summary>
	void Start () {
	}

	/// <summary>
	/// This method updates every frame, but this class waits for 
	/// user interaction and doesn't need it.
	/// </summary>
	void Update () {
	}

	/// <summary>
	/// This method returns the value of the label of the block
	///  snapped in, or -1 if no block is snapped in.
	/// </summary>
	/// <returns>The value.</returns>
	public int GetValue() {
		return connectedObject == null ? -1 : int.Parse (connectedObject.GetComponent<VroomObject> ().Label);
	}

	/// <summary>
	/// This method is used to let all listeners of the panel
	/// know an object has been snapped.  This is done
	/// by calling the OnSnap of all listeners.
	/// </summary>
	/// <param name="obj">Object that is connected</param>
	/// <param name="args">This is the arguments 
	/// of what was snapped in</param>
	public void ObjectConnected(object obj, SnapDropZoneEventArgs args) {
		connectedObject = args.snappedObject;

		foreach (var listener in listeners) {
			((ISortListener)listener).OnSnap ();
		}
	}

	/// <summary>
	/// This is the method that alerts all listeners when
	/// an object is disconnected from the panel, by
	/// calling the OnUnsnap.
	/// </summary>
	/// <param name="obj">Object that was 
	/// disconnected</param>
	/// <param name="args">These are the arguments of
	/// the object in the snapzone</param>
	public void ObjectDisconnected(object obj, SnapDropZoneEventArgs args) {
		connectedObject = null;

		foreach (var listener in listeners) {
			((ISortListener)listener).OnUnsnap ();
		}
	}

	/// <summary>
	/// This method allows someone to listen for the events
	/// generated by this panel.
	/// </summary>
	/// <param name="listener">ISortListener to add.</param>
	public void AddSortListener(ISortListener listener) {
		listeners.Add (listener);
	}
}
